This is a document of TODO items that we are currently leaving behind, and may come back to later.

SOCP
1)
#this doesnt work: cant handle : 2*x(1) + x(2) >= 14
string = """
cvx_begin
variables x(2)
minimize 2*x(1) + 4*x(2)
2*x(1) + x(2) >= 14
x(1) + x(2) >= 12
x(1) + 3*x(2) >= 18
x(1) >= 0
x(2) >= 0
cvx_end
"""

2) dual variable like this: x > 1 : dx, instead of dx : x > 1


GP
1) there is an extra print 'ggg' in gp path. find and delete it

2) DONE: Add checks for variable dimension. if x(3) is declared, x(>3) should not be accessed

3) implement __add__ instead of posy_add_posy()

4) add dual variables in GP

5) mono == mono == mono == mono is also possible. implement that ?

6) chained constraints in GP

7)feasibility problem (if no objective or constant objecive)

8) support ineqs/eqs of this type: x >= 1 (where x is a vector)
support sliced variables. x(2:3) >= 1

SDP
1) implement full parser for sdp or go with hui's string match based parser?


notes on SDP implementation.
a) generate code or feed constraints etc to a function that solves it?
b) all parameter matrices are created as cvx matrices

c) if we follow hui's parser, we still need to send the parameters to the generated code. that is we need to write them out like cvx.matrix([[1,2],[3,4]) or whatever




the solvers give a lot of prints. any way to quieten them?
